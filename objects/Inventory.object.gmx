<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Init the inventory

// Setup inventory layout
var window_width = window_get_width();
var window_height = window_get_height();
num_columns = 4;
num_rows = 4;
num_cells = num_rows * num_columns;
cell_padding = 10;
cell_width = 64;
//Get the padding required to center the items
top_padding = (window_height - ((num_rows - 1) * cell_width + (num_rows - 1) * cell_padding)) / 2;
left_padding = 100;
//(window_width - ((num_columns - 1) * cell_width + (num_columns - 1) * cell_padding)) / 2;

// Set inventory to invisible by default
inv_visible = false;

// Init the slots
cells[num_cells-1] = 0; // Fills in every index up to num_cells-1 with 0 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Open inventory on pressing 'i'
scr_get_input();

if (i_key) {
    if (inv_visible) {
        inv_visible = false;
    } else {
        inv_visible = true;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw the inventory

if (inv_visible) {

    // Set cell color
    draw_set_color(c_black);
    draw_set_alpha(.5);
    
    for (i = 0; i &lt; num_cells; i++) {
        var row = floor(i/num_columns) + 1;
        var column = i - (row-1) * num_columns;
        var item = cells[i];
        
        // Calculate offset due to padding
        var combined_left_padding = cell_padding * (column - 1);
        var combined_top_padding = cell_padding * (row - 1);
        
        // Calculate offset due to cell width
        var combined_cell_width = cell_width * (column - 1);
        var combined_cell_height = cell_width * (row - 1);
        
        // Find four points of cell
        var x1 = left_padding + combined_left_padding + combined_cell_width;
        var x2 = x1 + cell_width;
        var y1 = top_padding + combined_top_padding + combined_cell_height;
        var y2 = y1 + cell_width;
        
        // Find center of cell
        var x_center = x1 + cell_width/2;
        var y_center = y1 + cell_width/2;
        
        // Draw the cell
        draw_rectangle(x1,y1,x2,y2,false);
        
        // Draw the item
        if (item != 0) {
            draw_sprite_ext(item.sprite_index, 0, x_center, y_center, 3, 3, 45,c_white,1);
        }
    }
    
    // Reset the color and alpha
    draw_set_color(c_white);
    draw_set_alpha(1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
