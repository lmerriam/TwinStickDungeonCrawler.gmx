<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>Menu_Parent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Init the inventory

// Init the drag item
global.drag_item = noone;

// Init the slots
slots = ds_grid_create(4,4);
slots = ds_grid_clear(slots,noone);

// Set up the equipment slots
equipment[0] = global.current_weapon;
equipment[1] = global.current_spell;
equipment[2] = global.current_armor;
equipment[3] = global.current_gem;

// Setup inventory layout
var window_width = window_get_width();
var window_height = window_get_height();
slot_width = 64;
equipment_left_padding = 20;

// Get grid height and width
grid_height = ds_grid_height(slots);
grid_width = ds_grid_width(slots);

//Get the padding required to center the items
top_padding = (window_height - slot_width * grid_width) / 2;
left_padding = 100;

// Store the coordinates of the inventory
inv_x1 = left_padding;
inv_y1 = top_padding;
inv_x2 = left_padding + grid_width * slot_width;
inv_y2 = top_padding + grid_height * slot_width;

// Store coordinates of the slots
weapon_x = inv_x2 + equipment_left_padding;
weapon_y = top_padding;
armor_x = inv_x2 + equipment_left_padding;
armor_y = top_padding + slot_width;
spell_x = inv_x2 + equipment_left_padding;
spell_y = top_padding + slot_width*2;
gem_x = inv_x2 + equipment_left_padding;
gem_y = top_padding + slot_width*3;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Destroy DS
if (ds_exists(slots,ds_type_grid)) ds_grid_destroy(slots);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Detect the Inventory slot the mouse is over and store it
if (scr_mouse_over_inv()) {
    var inv_x = (mousex - inv_x1) div slot_width;
    var inv_y = (mousey - inv_y1) div slot_width;
    current_slot = slots[# inv_x, inv_y];
} else if (scr_mouse_over_ui(weapon_x,weapon_y,weapon_x+slot_width,weapon_y+slot_width)) {
    current_slot = global.current_weapon;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Check inventory item click
var mousex = window_mouse_get_x();
var mousey = window_mouse_get_y();

if (scr_mouse_over_inv()) {
    var inv_x = (mousex - inv_x1) div slot_width;
    var inv_y = (mousey - inv_y1) div slot_width;
    
    // Get item that's already in the slot
    var prev_item = slots[# inv_x,inv_y];
    
    // Set slot to new item
    slots[# inv_x,inv_y] = global.drag_item;
    
    // Set drag item to previous slot occupant
    global.drag_item = prev_item;
    
} else if (scr_mouse_over_ui(weapon_x,weapon_y,weapon_x+slot_width,weapon_y+slot_width)) {

    // Get item that's already in the slot
    var prev_item = global.current_weapon;
    
    // Set slot to new item
    if (global.drag_item != noone and object_is_ancestor(global.drag_item.object_index,Drop_Weapon_Parent)) {
        scr_equip(global.drag_item);
        global.drag_item = prev_item;
    }
    
} else if (scr_mouse_over_ui(armor_x,armor_y,armor_x+slot_width,armor_y+slot_width)) {

    // Get item that's already in the slot
    var prev_item = global.current_armor;
    
    // Set slot to new item
    if (global.drag_item != noone and object_is_ancestor(global.drag_item.object_index,Drop_Armor_Parent)) {
        scr_equip(global.drag_item);
        global.drag_item = prev_item;
    }
    
} else if (scr_mouse_over_ui(spell_x,spell_y,spell_x+slot_width,spell_y+slot_width)) {

    // Get item that's already in the slot
    var prev_item = global.current_spell;
    
    // Set slot to new item
    if (global.drag_item != noone and object_is_ancestor(global.drag_item.object_index,Drop_Scroll_Parent)) {
        scr_equip(global.drag_item);
        global.drag_item = prev_item;
    }
    
} else if (scr_mouse_over_ui(gem_x,gem_y,gem_x+slot_width,gem_y+slot_width)) {

    // Get item that's already in the slot
    var prev_item = global.current_gem;
    
    // Set slot to new item
    if (global.drag_item != noone and object_is_ancestor(global.drag_item.object_index,Drop_Gem_Parent)) {
        scr_equip(global.drag_item);
        global.drag_item = prev_item;
    }
    
} else {
    if (global.drag_item != noone) {
        scr_drop_item(global.drag_item);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw the inventory

// Set cell color
draw_set_color(c_black);
draw_set_alpha(.5);

scr_draw_inventory(ds_grid,slot_width,offset_left,offset_right);

// Draw the inventory
for (column = 0; column &lt; grid_width; column++) {
    for (row = 0; row &lt; grid_height; row++) {
        var x1 = column * slot_width + left_padding;
        var y1 = row * slot_width + top_padding;
        var x2 = x1 + slot_width;
        var y2 = y1 + slot_width;
        
        scr_draw_inv_slot(x1,y1,x2,y2,slots[# column,row]);
    }
}

// Draw the equipment slots
scr_draw_inv_slot(weapon_x,weapon_y,weapon_x+slot_width,weapon_y+slot_width,global.current_weapon);
scr_draw_inv_slot(armor_x,armor_y,armor_x+slot_width,armor_y+slot_width,global.current_armor);
scr_draw_inv_slot(spell_x,spell_y,spell_x+slot_width,spell_y+slot_width,global.current_spell);
scr_draw_inv_slot(gem_x,gem_y,gem_x+slot_width,gem_y+slot_width,global.current_gem);

// Show sprite on mouse if dragging
if (global.drag_item != noone) {
    var mousex = window_mouse_get_x();
    var mousey = window_mouse_get_y();
    draw_sprite_ext(global.drag_item.sprite_index, 0,mousex,mousey,4,4,45,c_white,1);
}

// Reset the color and alpha
draw_set_color(c_white);
draw_set_alpha(1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
