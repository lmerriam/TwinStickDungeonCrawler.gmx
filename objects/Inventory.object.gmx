<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>Menu_Parent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Init the inventory

// Set up inv slots
global.inventory_slots = ds_grid_create(6,6);
ds_grid_clear(global.inventory_slots,noone);

// Init the drag item
global.drag_item = noone;
selected_item = noone;
current_inventory = noone;
current_item = noone;
current_slot_x = 0;
current_slot_y = 0;
eqp_btn = false;

// Setup some layout stuff
slot_width = 64 ;
equipment_left_padding = 20;

// Set up the inventory offsets
// Centering that shit
// TODO: why the fuck can I not get global.window_width yet
var inventory_offset_left = (view_wport[0] - slot_width * ds_grid_width(global.inventory_slots)) / 2;
var inventory_offset_top = (view_hport[0] - slot_width * ds_grid_height(global.inventory_slots)) / 2;

// Get the inventory coordinates
inventory_coords = scr_init_inventory(global.inventory_slots, slot_width, inventory_offset_left, inventory_offset_top);

// Set up the equipment slots
global.equipment_slots = ds_grid_create(1,4);
ds_grid_clear(global.equipment_slots,noone);
scr_equip(instance_create(0,0,Hammer));
scr_equip(instance_create(0,0,Scroll_Column));
scr_equip(instance_create(0,0,Armor_Heavy));
scr_equip(instance_create(0,0,Gem_Burn));

// Set up the equipment slot offsets
var equipment_offset_left = inventory_coords[2] + equipment_left_padding;
var equipment_offset_top = inventory_coords[1];

// Get the equipment slot coordinates
equipment_coords = scr_init_inventory(global.equipment_slots, slot_width, equipment_offset_left, equipment_offset_top);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set up the inventory close btn
close_btn_x1 = 16;
close_btn_y1 = 16;
close_btn_x2 = 128;
close_btn_y2 = 128;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set up inventory tooltip and equip button
inv_tooltip_width = 200;
inv_tooltip_x = inventory_coords[0] - 16 - inv_tooltip_width; 
inv_tooltip_y = inventory_coords[1];
inv_tooltip_line_height = 20;
inv_tooltip_padding = 3;
inv_tooltip_height = 0;

eqp_btn_x1 = inv_tooltip_x;
eqp_btn_x2 = eqp_btn_x1 + inv_tooltip_width;
eqp_btn_y1 = 0;
eqp_btn_y2 = eqp_btn_y1 + 32;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Destroy DS
if (ds_exists(slots,ds_type_grid)) ds_grid_destroy(slots);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Detect the Inventory slot the mouse is over and store it
var mousex = device_mouse_x_to_gui(0);
var mousey = device_mouse_y_to_gui(0);

// TODO: figure out why the fuck div seems to be rounding up so I can remove these -3s
if (scr_mouse_over_inv()) {
    current_inventory = global.inventory_slots;
    current_slot_x = (mousex - inventory_coords[0]-3) div slot_width;
    current_slot_y = (mousey - inventory_coords[1]-3) div slot_width;
    if(current_slot_x == 6) show_message(string(mousex - inventory_coords[0]) + " " + string(slot_width));
    current_item = global.inventory_slots[# current_slot_x,current_slot_y];    
} else if (scr_mouse_over_ui(equipment_coords[0],equipment_coords[1],equipment_coords[2],equipment_coords[3])) {
    current_inventory = global.equipment_slots;
    current_slot_x = (mousex - equipment_coords[0]-3) div slot_width;
    current_slot_y = (mousey - equipment_coords[1]-3) div slot_width;
    current_item = global.equipment_slots[# current_slot_x,current_slot_y];
} else {
    current_inventory = noone;
    current_slot_x = 0;
    current_slot_y = 0;
    current_item = noone;
}

if (selected_item != noone) {
    inv_tooltip_height = array_height_2d(selected_item.text)*inv_tooltip_line_height+inv_tooltip_padding*2;
    if (eqp_btn) {
        eqp_btn_y1 = inv_tooltip_y + inv_tooltip_height + 16;
        eqp_btn_y2 = eqp_btn_y1 + 32;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Check inventory clicks

// Check for equip btn
if (eqp_btn and scr_mouse_over_ui(eqp_btn_x1,eqp_btn_y1,eqp_btn_x2,eqp_btn_y2)) {
    global.inventory_slots[# selected_item_x,selected_item_y] = noone;
    scr_equip(selected_item);
    
// Check for close button
} else if (scr_mouse_over_ui(close_btn_x1,close_btn_y1,close_btn_x2,close_btn_y2)) {
    with (View) event_perform(ev_keypress,ord('I'));
}


selected_item = current_item;
selected_item_x = current_slot_x;
selected_item_y = current_slot_y;

// Show/hide eqp btn
if (current_inventory == global.inventory_slots and current_item != noone) {
    eqp_btn = true

// Turn off eqp button
} else {
    eqp_btn = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw the inventory
event_inherited();

draw_text(32, 200, current_item);

// Set cell color
draw_set_color(c_black);
draw_set_alpha(.5);

// Draw the inventory slots
scr_draw_inventory(global.inventory_slots, slot_width, inventory_coords[0], inventory_coords[1]);

// Draw the equipment slots
scr_draw_inventory(global.equipment_slots, slot_width, equipment_coords[0], equipment_coords[1]);

if (selected_item != noone) {
    scr_draw_inv_tooltip(selected_item.text,32,64,200);
}

// Reset the color and alpha
draw_set_color(c_white);
draw_set_alpha(1);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw the close btn
draw_sprite(spr_menu_button,0,close_btn_x1,close_btn_y1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
