<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Init the inventory

// Init the drag item
global.drag_item = noone;

// Setup inventory layout
var window_width = window_get_width();
var window_height = window_get_height();
slot_width = 64;

//Get the padding required to center the items
top_padding = 200;
left_padding = 200;

// Set inventory to invisible by default
inv_visible = false;

// Init the slots
slots = ds_grid_create(4,4);
slots = ds_grid_clear(slots,noone);

// Get grid height and width
grid_height = ds_grid_height(slots);
grid_width = ds_grid_width(slots);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Destroy DS
if (ds_exists(slots,ds_type_grid)) ds_grid_destroy(slots);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Open inventory on pressing 'i'
scr_get_input();

if (i_key) {
    if (inv_visible) {
        inv_visible = false;
    } else {
        inv_visible = true;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Check inventory item click
if (inv_visible = true) {
    var mousex = window_mouse_get_x();
    var mousey = window_mouse_get_y();
    var combined_slot_width = slot_width * grid_width;
    var combined_slot_height = slot_width * grid_height;
    if (mousex &gt; left_padding and mousex &lt; left_padding + combined_slot_width and mousey &gt; top_padding and mousey &lt; top_padding + combined_slot_height) {
        var inv_x = floor((mousex - left_padding) / slot_width);
        var inv_y = floor((mousey - top_padding) / slot_width);
        
        // Get item that's already in the slot
        var prev_item = slots[# inv_x,inv_y];
        
        // Set slot to new item
        slots[# inv_x,inv_y] = global.drag_item;
        
        // Set drag item to previous slot occupant
        global.drag_item = prev_item;
        
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw the inventory

if (inv_visible) {

    // Set cell color
    draw_set_color(c_black);
    draw_set_alpha(.5);
    
    // Draw the inventory
    for (column = 0; column &lt; grid_width; column++) {
        for (row = 0; row &lt; grid_height; row++) {
            x1 = column * slot_width + left_padding;
            y1 = row * slot_width + top_padding;
            x2 = x1 + slot_width;
            y2 = y1 + slot_width;
            
            draw_rectangle(x1,y1,x2,y2,false);
            if(slots[# column,row] != noone and slots[# column,row] != global.drag_item) {
                draw_sprite_ext(slots[# column,row].sprite_index, 0,x1+(slot_width/2),y1+(slot_width/2),3,3,45,c_white,1);
            }
        }
    }
    
    if (global.drag_item != noone) {
        var mousex = window_mouse_get_x();
        var mousey = window_mouse_get_y();
        draw_sprite_ext(global.drag_item.sprite_index, 0,mousex,mousey,4,4,45,c_white,1);
    }
    
    // Reset the color and alpha
    draw_set_color(c_white);
    draw_set_alpha(1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
