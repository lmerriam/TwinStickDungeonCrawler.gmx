<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>9</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Init buttons
tab_width = global.window_width/5;
tab_height = 64;

inv_btn[0] = 0;
inv_btn[1] = 0;
inv_btn[2] = tab_width;
inv_btn[3] = tab_height;
inv_btn[4] = "INVENTORY";
inv_btn[5] = global.menu_inventory;

char_btn[0] = tab_width;
char_btn[1] = 0;
char_btn[2] = tab_width;
char_btn[3] = tab_height;
char_btn[4] = "CHARACTER";
char_btn[5] = global.menu_character;

map_btn[0] = char_btn[0]+tab_width;
map_btn[1] = 0;
map_btn[2] = tab_width;
map_btn[3] = tab_height;
map_btn[4] = "MAP";
map_btn[5] = global.menu_map;

save_btn[0] = map_btn[0]+tab_width+4;
save_btn[1] = 0;
save_btn[2] = tab_width-4;
save_btn[3] = tab_height;
save_btn[4] = "SAVE";
save_btn[5] = noone;

close_btn[0] = save_btn[0]+tab_width;
close_btn[1] = 0;
close_btn[2] = tab_width;
close_btn[3] = tab_height;
close_btn[4] = "CLOSE";
close_btn[5] = noone;

tab_btns = ds_list_create();
ds_list_add(tab_btns,inv_btn,char_btn,map_btn,save_btn,close_btn);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="56">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Check for clicks
if (scr_check_btn(inv_btn)) {
    scr_toggle_menu(global.menu_inventory);
} else if (scr_check_btn(char_btn)) {
    scr_toggle_menu(global.menu_character);
} else if (scr_check_btn(map_btn)) {
    scr_toggle_menu(global.menu_map);
} else if (scr_check_btn(save_btn)) {

    show_debug_message("I am FILLED with Christ's love");
    
    // Create map to save from
    var save_data = ds_map_create();
    
    // Iterate through inventory
    for (column = 0; column &lt; ds_grid_width(global.inventory_slots); column++) {
        for (row = 0; row &lt; ds_grid_height(global.inventory_slots); row++) {
        
            // Activate the item in this slot
            var item = ds_grid_get(global.inventory_slots,column,row);// global.inventory_slots[# column, row];
            instance_activate_object(item);
            
            // Get slot so we can return it to the right place
            var slot = (row*4) + column;
            
            // Save the items data to it's own map
            var item_data = ds_map_create();
            if (item != noone) {
                // Save the object index so it can be recreated later
                item_data[? "object_index"] = item.object_index;
                // Save the item's stats
                ds_map_add_map(item_data,"Stats",item.stats);
                // Save the item's position
                item_data[? "x"] = item.x;
                item_data[? "y"] = item.y;
            } else {
                item_data[? "object_index"] = noone;
            }
            
            // Nest the item_data map and destroy it
            ds_map_add_map(save_data,slot,item_data);
        }
    }
    
    // Open the save file and save the data to it
    var file = file_text_open_write(working_directory + "inventory.txt");
    file_text_write_string(file,json_encode(save_data));
    file_text_close(file);
    ds_map_destroy(save_data);
    
} else if (scr_check_btn(close_btn)) {
    scr_toggle_menu(noone);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw top bar buttons
draw_set_color(c_black);
draw_set_alpha(.7);
draw_rectangle(0,0,global.window_width,global.window_height,false);
draw_set_alpha(1);

for (i=0;i&lt;ds_list_size(tab_btns);i++) {
    scr_draw_tab_btn(tab_btns[| i]);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
