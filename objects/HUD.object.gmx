<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>Menu_Parent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Show debug
show_debug_overlay(true);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Init GUI elements
event_inherited();

// Window properties
window_width = global.window_width;
window_height = global.window_height;
windowpadding = .01 * window_width;
draw_set_font(PixelSmall);

// Init cast mode
global.cast_mode = false;
cast_btn_width = 96;
cast_btn[0] = window_width - cast_btn_width - windowpadding;
cast_btn[1] = window_height - windowpadding - cast_btn_width;
cast_btn[2] = cast_btn_width;
cast_btn[3] = cast_btn_width;
cast_btn[4] = spr_menu_button;

// Init minimap
minimap = -1;
minimap_width = window_height/5;
minimap_height = minimap_width;
minimap_window = 500;
minimap_window_x = window_width - minimap_width - windowpadding;
minimap_window_y = windowpadding;
minimap_btn[0] = minimap_window_x;
minimap_btn[1] = minimap_window_y;
minimap_btn[2] = minimap_width;
minimap_btn[3] = minimap_height;
minimap_btn[4] = noone;

// Init menu button
var width = .1 * window_width;
var height = width;
menu_btn_origin_x = windowpadding + width/2;
menu_btn_origin_y = windowpadding + height/2;
menu_btn_x2 = menu_btn_origin_x + width;

menu_btn[0] = windowpadding;
menu_btn[1] = windowpadding;
menu_btn[2] = windowpadding+width;
menu_btn[3] = windowpadding + height;
menu_btn[4] = spr_menu_button;

// Init nearest drop UI
nearest_drop = noone;
nearest_drop_in_range = false;
nearest_button_height = 40;

nearest_btn[0] = 0;
nearest_btn[1] = 0;
nearest_btn[2] = 0;
nearest_btn[3] = nearest_button_height;
nearest_btn[4] = noone;

ds_list_add(buttons,cast_btn,menu_btn,nearest_btn);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Check HUD taps
x = Player.x;
y = Player.y;

view_xview[1] = Player.x - view_wview[1]/2;
view_yview[1] = Player.y - view_hview[1]/2;

if (!global.cast_mode) {
    // Check for nearest drop
    nearest_drop = instance_nearest(x,y,Drop_Parent);
    if (distance_to_object(nearest_drop) &lt; 32) {
        nearest_drop_in_range = true;
        with(nearest_drop) {
            image_index = 1;
        }
    } else {
        nearest_drop_in_range = false;   
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Open menu
var xx = device_mouse_x_to_gui(0);
var yy = device_mouse_y_to_gui(0);

if (global.cast_mode) {
    var spell = scr_get_spell().script;
    script_execute(spell);
    global.cast_mode = false;
    global.timescale = 1;
    //Player.spell_timer = scr_sec_from_now(Player.spell_cd);
    Player.stats[? "Stamina"] -= scr_get_spell().stats[? "Fatigue"];
} else {
    if (scr_check_btn(cast_btn)) {
        global.cast_mode = true;
        global.timescale = .1;
    } else if (scr_check_btn(menu_btn)) {
        with(View) {
            event_perform(ev_keypress,ord('I'));
        }
    
    } else if (scr_check_btn(minimap_btn)) {
        with(View) {
            event_perform(ev_keypress,ord('M'));
        }
        
    // Detect pickup button click
    } else if (nearest_drop != noone and scr_check_btn(nearest_btn)) {
        scr_send_to_inv(nearest_drop);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Reset the views

// Clear the minimap surface
minimap = -1;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Destroy surface
if (surface_exists(minimap)) {
    surface_free(minimap);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw HUD elements
event_inherited();

if (global.cast_mode) {
    draw_set_alpha(.1);
    draw_rectangle_colour(0,0,global.window_width,global.window_height,c_fuchsia,c_fuchsia,c_fuchsia,c_fuchsia,false);
    draw_set_alpha(1);
    draw_set_halign(fa_center);
    draw_text(window_width/2,window_height*.75,scr_get_spell().tooltip);
    draw_set_halign(fa_left);
} else {
    // Draw nearest drop tooltip
    if (nearest_drop_in_range) {
        scr_draw_nearest_comparison(nearest_drop.text,16,128,200);
    }
    
    
    // Draw the minimap
    draw_surface_stretched(minimap,minimap_window_x,minimap_window_y,minimap_width,minimap_height);
    draw_rectangle_colour(minimap_window_x, minimap_window_y, minimap_window_x+minimap_width, minimap_window_y+minimap_height, c_black, c_black, c_black, c_black, true);
    draw_sprite_ext(spr_player_arrow,0,(minimap_window_x + (minimap_width/2)),(minimap_window_y + (minimap_height/2)),1,1,global.mousedir,c_white,1);
    
    // Draw health and stamina
    var hp = Player.stats[? "Health"];
    var maxhp = Player.stats[? "Max Health"];
    var stamina = Player.stats[? "Stamina"];
    var maxstamina = Player.stats[? "Max Stamina"];
    var hbar = .025*window_height;
    var lbar = .25*window_width;
    var padding = .01*window_height;
    draw_healthbar(menu_btn_x2+padding,windowpadding,menu_btn_x2+padding+lbar,windowpadding+hbar,hp/maxhp*100,c_black,c_red,c_green,0,true,true);
    draw_healthbar(menu_btn_x2+padding,windowpadding+hbar+padding,menu_btn_x2+padding+lbar,windowpadding+hbar*2+padding,stamina/maxstamina*100,c_black,c_blue,c_blue,0,true,true);
    
    // Draw expr
    var hbar = 3;
    var expr = Player.stats[? "Experience"];
    var maxexpr = Player.stats[? "Next Level Experience"];
    draw_healthbar(0,window_height-hbar,window_width,window_height,expr/maxexpr*100,c_black,c_white,c_white,0,true,true);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw the minimap surface
var sprw = sprite_get_width(global.current_map);
var sprh = sprite_get_height(global.current_map);

if (surface_exists(minimap)) {

    surface_set_target(minimap);
    
    draw_clear(c_black);
    draw_sprite_part(global.current_map,0,Player.x/4-100,Player.y/4-100,200,200,0,0);
    
    surface_reset_target();
    
} else {
    minimap = surface_create(200,200);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
