<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>Menu_Parent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create surface
fullscreen_map = noone;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw the menu
event_inherited();

var window_width = global.window_width;
var window_height = global.window_height;

// Draw fullscreen map
var map = global.current_map;
var ratio = window_width / room_width;
var fullscreen_map_x = global.player_x * ratio;
var fullscreen_map_y = global.player_y * ratio;
var map_width = sprite_get_width(map);
var map_height = sprite_get_height(map);
var map_sprite_x = (window_width / 2) - map_width / 2;
var map_sprite_y = (window_height / 2) - map_height / 2;


if (surface_exists(fullscreen_map)) {
    surface_set_target(fullscreen_map);
    draw_clear_alpha(c_black,0.5);
    draw_sprite(map, 0, map_sprite_x, map_sprite_y);
    surface_reset_target();
    // Draw fullscreen_map
    draw_surface(fullscreen_map, 0, 0);
    // Draw player position arrow
    draw_circle_colour(fullscreen_map_x,fullscreen_map_y,1,c_yellow,c_yellow,false);
    
    for (i = 0; i &lt; instance_number(Teleporter); i ++) {
        var inst = instance_find(Teleporter,i);
        draw_sprite(Teleporter.sprite_index,0,inst.x*ratio,inst.y*ratio)
    }
} else {
    fullscreen_map = surface_create(window_width,window_height);
    surface_set_target(fullscreen_map);
    draw_clear_alpha(c_black,0.5);
    surface_reset_target();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
