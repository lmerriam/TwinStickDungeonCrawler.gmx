<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player_idle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>-1</persistent>
  <parentName>Lifeform_Parent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Init stats
event_inherited();

device_mouse_dbclick_enable(false);

scale = 1.5;
image_xscale = scale;
image_yscale = scale;
image_speed = .3;
phy_fixed_rotation = true;

global.mousedir = 0;
attack_button = false;
spell_button = false;

// Stats
level = 1;
expr = 0;
maxexpr = 3;
attack_spd = 1;
attack_range = 10;

// Base stats
base_maxhp = 50 + (5 * level);
base_maxstamina = 10 + (2 * level);
base_damage = 3 + level;
base_spd = 2;

hp = base_maxhp;
stamina = base_maxstamina;

// Timers
attack_timer = 0;
spell_timer = 0;
stamina_timer = 0;

// Teleport
global.teleport_player_x = noone;
global.teleport_player_y = noone;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>    /// Inherit
    event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Stamina regen
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Attack cooldown
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Spell cooldown
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Attack speed timer
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Get mouse position and player angle
global.mousedir = point_direction(x,y,mouse_x,mouse_y);
global.mousex = mouse_x;
global.mousey = mouse_y;
global.mouse_screen_x = window_mouse_get_x();
global.mouse_screen_y = window_mouse_get_y();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Control stats
scr_calc_stats();

// HP
if (hp &lt; 0) {
    hp = 0;
}

// Stamina regen
if (stamina &lt; maxstamina and scr_alarm_passed(stamina_timer)) {
    stamina++;
    stamina_timer = scr_sec_from_now(1);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Control player
event_inherited();
scr_get_input();

var len;
var dir;

global.player_x = x;
global.player_y = y;

attack_button = false;
spell_button = false;

if (!global.cast_mode) {

if (os_type == os_android) {
    
    if (device_mouse_check_button(0,mb_left)) {
        
        var move_device;
        var aim_device;
        
        // Figure out move and aim touches based on the side of the
        // screen the first touch occurs on
        if (device_mouse_x_to_gui(0) &lt; global.window_width/2) {
            move_device = 0;
            aim_device = 1;
        } else {
            move_device = 1;
            aim_device = 0;
        }
        
        // Get the coordinates of the current move device
        var move_device_x = device_mouse_x_to_gui(move_device);
        var move_device_y = device_mouse_y_to_gui(move_device);
        
        // Get the coordinates of the aim device
        var aim_device_x = device_mouse_x_to_gui(aim_device);
        var aim_device_y = device_mouse_y_to_gui(aim_device);
        
        // If the move touch started this frame, set the move origin
        if (device_mouse_check_button_pressed(move_device,mb_left)) {
            move_origin_x = move_device_x;
            move_origin_y = move_device_y;
        }
        // If the aim touch started this frame, set the aim origin
        if (device_mouse_check_button_pressed(aim_device,mb_left)) {
            aim_origin_x = aim_device_x;
            aim_origin_y = aim_device_y;
        }
        
        // Get the length if the move device is active
        if (device_mouse_check_button(move_device,mb_left)) {
            len = clamp(point_distance(move_origin_x,move_origin_y,move_device_x,move_device_y),0,spd);
            dir = point_direction(move_origin_x,move_origin_y,move_device_x,move_device_y);
            global.mousedir = dir;
        } else {
            len = 0;
            dir = 0;
        }
        
        // Get the mouse direction if the aim device is active
        if (device_mouse_check_button(aim_device,mb_left) and point_distance(aim_origin_x, aim_origin_y, aim_device_x, aim_device_y) &gt; 16) {
            global.mousedir = point_direction(aim_origin_x, aim_origin_y, aim_device_x, aim_device_y);
            attack_button = true;
        }
        
        if (device_mouse_check_button(aim_device,mb_right)) {
            spell_button = true;
        }
        
    } else {
        len = 0;
        dir = 0;
    }
    
} else {
    //Get mousedir
    global.mousedir = point_direction(x, y, mouse_x, mouse_y);
    
    //Get axis
    var xaxis = (right_key - left_key);
    var yaxis = (down_key - up_key);
    
    // Get direction
    dir = point_direction(0,0, xaxis, yaxis);
    
    // Get length
    if (xaxis == 0 and yaxis == 0) {
        len = 0;
    } else {
        len = spd;
    }
    
    if (mouse_left) attack_button = true;
    if (mouse_right) spell_button = true;
}

// Calculate hspd and vspd
hspd = lengthdir_x(len,dir);
vspd = lengthdir_y(len,dir);

// Set up the player sprite
front = true;
orientation = true;
if (global.mousedir &gt; 90 and global.mousedir &lt; 270) orientation = -1 else orientation = 1;
if (global.mousedir &lt; 135 and global.mousedir &gt; 45) front = false else front = true;
image_xscale = orientation*scale;

if (len &gt; 0) {

    if (front) {
        sprite_index = spr_player_running;
    } else {
        sprite_index = spr_player_running_back;
    }
    if (sign(hspd) == orientation) image_speed = .3 else image_speed = -.3;
    
} else {
    if (front) {
        sprite_index = spr_player_idle;
    } else {
        sprite_index = spr_player_idle_back;
    }
}

// Move the player
if (!scr_tile_collision(Player.x+hspd,Player.y)) phy_position_x += hspd;
if (!scr_tile_collision(Player.x,Player.y+vspd)) phy_position_y += vspd;



var weapon = scr_get_weapon();
var spell = scr_get_spell();

// Left Attack
if (attack_button and scr_alarm_passed(attack_timer) and !global.mouse_over_ui) {
    script_execute(weapon.script);
    attack_timer = scr_sec_from_now(weapon.cd);
}

// Right attack
if (spell_button and stamina &gt;= spell.fatigue and scr_alarm_passed(spell_timer)) {
    script_execute(spell.script);
    stamina -= spell.fatigue;
    spell_timer = scr_sec_from_now(spell.cd);
}

}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Teleport player
if (global.teleport_player_x != noone) {
    scr_move_player(global.teleport_player_x,global.teleport_player_y);
    global.teleport_player_x = noone;
    global.teleport_player_y = noone;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Render tiles
var tile_x = x div global.tilewidth;
var tile_y = y div global.tileheight;

var tile_left = tile_x - 6;
var tile_right = tile_x + 6;
var tile_top = tile_y - 6;
var tile_bottom = tile_y + 6;

if (floor(Time.now) mod 30 = 0) {
    for (row = tile_top; row&lt;tile_bottom; row++) {
        for (col = tile_left; col&lt;tile_right; col++) {
            if (!global.visible_tiles[# col,row] and global.map_tiles[# col,row] != 0) {
                var tile = global.map_tiles[# col,row];
                var tile_id = tile[0];
                var tile_visible = tile[1];
                var tile_depth = tile[2];
                var tileset = tile[3];
                var left = tile[4];
                var top = tile[5];
                var xx = tile[6];
                var yy = tile[7];
                
                
                tile_add(tileset,left,top,global.tilewidth,global.tileheight,xx,yy,tile_depth);
                global.visible_tiles[# col,row] = true;
            }
        }
    }
} else if(floor(Time.now) mod 100 = 0) {
    for (row = 0; row&lt;ds_grid_height(global.visible_tiles); row++) {
        for (col = 0; col&lt;ds_grid_width(global.visible_tiles); col++) {
            var tile = global.map_tiles[# col,row];
            if (tile!=0 and tile_exists(tile[0])) {
                tile_delete(tile[0]);
            }
            global.visible_tiles[# col,row] = false;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="Health">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Collect health
with (other) instance_destroy();

// Health up
hp = min(hp+5, maxhp); // min always returns the minimum of the array, helps us not go over maxhp


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="Door">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>    /// Go through door

    if (room_exists(other.new_room)) {

        // Activate objects that need to persist
        // They will automatically be deactivated again by the view after they've transitioned to the new room
        scr_activate_inv();

        instance_activate_object(Menu_Parent);
        
        room_goto(other.new_room);
        x = other.new_x;
        y = other.new_y;
        View.x = other.new_x;
        View.y = other.new_y;
        
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="Expr">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Collect expr
with (other) instance_destroy();

// Level up
expr += 1;
if (expr &gt;= maxexpr) {
    level += 1;
    expr = expr-maxexpr;
    maxexpr += level;
    base_maxhp += 2;
    hp = maxhp;
    base_maxstamina += 2;
    stamina = maxstamina;
    scr_announce("Achieved level " + string(level), noone);
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set fixed rotation again
phy_fixed_rotation = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw crosshair
event_inherited();

if (attack_button) draw_sprite(spr_crosshair,0,global.crosshair_x,global.crosshair_y);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>-1</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>5</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>-1</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,10</point>
    <point>12,10</point>
    <point>12,14</point>
    <point>0,14</point>
  </PhysicsShapePoints>
</object>
